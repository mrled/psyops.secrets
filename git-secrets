#!/bin/sh

# Based on <https://gist.github.com/shadowhand/873637>

set -e
set -u

passfile="$HOME/.secrets.pass"

usage() {
    cat <<ENDUSAGE
$0: Git handler for en/decrypting on commit/diff/checkout
USAGE: $0 <clean>|<smudge>|<diff FILE>|<setup REPOPATH [GLOB]>
    clean:  Run automatically as a git checkout filter
    smudge: Run automatically as a git commit filter
    diff:   Run automatically by 'git diff'
        FILE:       One of the files to diff
    setup:  Set up a repository
        REPOPATH:   The path to an existing checked out git repository
        GLOB:       The filename filter for encrypted files. '*' by default,
                    but can be restricted to certain filetypes, like
                    '*.remotecrypt'

FILES:
- The automatic git process expects a plainted passphrase stored in "$passfile"

USE WITH GIT
To use with git, add sections to a repository's .gitattributes and .git/config
files with '$0 setup'.
ENDUSAGE
}

setuprepo() {
    defaultfilter='*'
    filter=
    repopath=
    for arg in "$@"; do
        if test -z "$repopath"; then
            repopath="$arg"
        elif test -z "$filter"; then
            filter="$arg"
        else
            echo "ERROR: too many arguments to setuprepo"
            return 1
        fi
    done

    gitattrib="$repopath/.gitattributes"
    gitconfig="$repopath/.git/config"
    if test -z "$repopath"; then
        echo "No repository path passed to setuprepo"
        return 1
    elif ! test -e "$gitconfig"; then
        echo "ERROR: no repo at '$repopath'"
        return 1
    fi

    if test -z "$filter"; then filter="$defaultfilter"; fi
    if ! test -e "$gitattrib"; then touch "$gitattrib"; fi

    cat >> "$gitattrib" <<ENDATTRIB
$filter filter=openssl diff=openssl
[merge]
    renormalize=true
ENDATTRIB
    cat >> "$gitconfig" <<ENDCONFIG
[filter "openssl"]
    smudge = $0 smudge
    clean = $0 clean
[diff "openssl"]
    textconv = $0 diff
ENDCONFIG

    echo "Examine '$gitattrib' and '$gitconfig' to verify that they have been configured correctly"
}

getpassphrase() {
    passphrase=$(cat "$passfile")
    if test -z "$passphrase"; then
        usage
        echo "\nERROR: Could not find passphrase in '$passfile'"
        exit 1
    fi
    echo "$passphrase"
}

gitcleanfilter() {
    passphrase=$(getpassphrase)
    openssl enc -base64 -aes-256-cbc -nosalt -k "$passphrase"
}

gitsmudgefilter() {
    passphrase=$(getpassphrase)
    openssl enc -d -base64 -aes-256-cbc -k "$passphrase" 2> /dev/null || cat
}

gitdiffhandler() {
    if test $# -ne 1; then
        usage
        echo "\nERROR: no file passed for '$0 diff'"
        return 1
    fi
    difffile="$1"
    passphrase=$(getpassphrase)
    openssl enc -d -base64 -aes-256-cbc -k "$passphrase" -in "$difffile" 2> /dev/null || cat "$difffile"
}

action=
directobject=
for arg in "$@"; do
    case "$arg" in
        clean)  action="clean";  shift ;;
        smudge) action="smudge"; shift ;;
        diff)   action="diff";   shift ;;
        setup)  action="setup";  shift ;;
        *)
            if test "$directobject"; then
                usage
                echo "\nERROR: Only one directobject argument is allowed"
                exit 1
            fi
            directobject="$arg"
            ;;
    esac
done

case "$action" in
    clean)  gitcleanfilter;;
    smudge) gitsmudgefilter;;
    diff)   gitdiffhandler "$directobject";;
    setup)  setuprepo;;
    *)
        usage
        echo "\nERROR: Invalid action '$action'"
        exit 1
        ;;
esac
